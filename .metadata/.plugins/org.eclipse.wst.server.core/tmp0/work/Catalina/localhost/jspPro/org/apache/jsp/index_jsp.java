/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-10-21 03:07:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"http://localhost/jspPro/images/SiSt.ico\">\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"http://localhost/jspPro/resources/cdn-main/example.css\">\r\n");
      out.write("<script src=\"http://localhost/jspPro/resources/cdn-main/example.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write(" span.material-symbols-outlined{\r\n");
      out.write("    vertical-align: text-bottom;\r\n");
      out.write(" }  \r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<header>\r\n");
      out.write("  <h1 class=\"main\"><a href=\"#\" style=\"position: absolute;top:30px;\">kenik HOme</a></h1>\r\n");
      out.write("  <ul>\r\n");
      out.write("    <li><a href=\"#\">로그인</a></li>\r\n");
      out.write("    <li><a href=\"#\">회원가입</a></li>\r\n");
      out.write("  </ul>\r\n");
      out.write("</header>\r\n");
      out.write("<div>\r\n");
      out.write(" <xmp class=\"code\">\r\n");
      out.write("    index.jsp\r\n");
      out.write("    1. JSP/Servlet\r\n");
      out.write("  		ㄴjava의 web 기술\r\n");
      out.write("  	    1) Servlet 단점 너무 많아\r\n");
      out.write("  	    2) JSP = Java Server Page\r\n");
      out.write("  			 자바 언어 + 서버에서 실행되는 페이지\r\n");
      out.write("  			 \r\n");
      out.write("    2. 처리 과정\r\n");
      out.write("       client(browser) --request--> web server(apache) -> WAS(index.jsp + Java 컴파일, 실행하여 결과물 생성(html 형태))\r\n");
      out.write("       					url : index.html이라면 바로 결과를 응답\r\n");
      out.write("       					\r\n");
      out.write("       					하지만\r\n");
      out.write("       					url : index.jsp이라면 응답만 하고 java를 compile, 실행할 수 없어\r\n");
      out.write("       					그러니까 java로 작성된 걸 complie, 실행할 게 필요하므로\r\n");
      out.write("       					web application server사용(Tomcat)\r\n");
      out.write("       					\r\n");
      out.write("       				   <--response--\r\n");
      out.write("       				   \r\n");
      out.write("       				   jsp 문법은 tomcat 버전에 따라 달라져\r\n");
      out.write("       				 \r\n");
      out.write("    3.  Servlet 4.0\r\n");
      out.write("    	JSP 2.3\r\n");
      out.write("    	EL 3.0\r\n");
      out.write("    	WebSocket 1.1\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    [ 2주 JSP 수업 내용 ]\r\n");
      out.write("     1. JSP 페이지의 구성요소 \r\n");
      out.write("     2. JSP 3가지 지시자 - \r\n");
      out.write("        1) page, \r\n");
      out.write("        2) include, \r\n");
      out.write("        3) taglib\r\n");
      out.write("        \r\n");
      out.write("     3. JSP 스크립트 - \r\n");
      out.write("        1) 스크립트릿, \r\n");
      out.write("        2) 표현식, \r\n");
      out.write("        3) 선언문\r\n");
      out.write("        \r\n");
      out.write("     4. JSP 처리 과정 \r\n");
      out.write("     5. 웹 어플리케이션 배포\r\n");
      out.write("     6. 페이지 모듈화\r\n");
      out.write("     7. 자바빈(java bean)과 액션태그\r\n");
      out.write("     8. JSP 쿠키, 세션 - 상태관리\r\n");
      out.write("     9. EL 3.0 (표현언어)\r\n");
      out.write("        Expression Language\r\n");
      out.write("     10. JSTL( 표준 태그 라이브러리)\r\n");
      out.write("     11. 커넥션풀( Connection Pool )\r\n");
      out.write("     12. 서블릿(Servlet)\r\n");
      out.write("     13. MVC 패턴  ***\r\n");
      out.write("     14. 필터(Filter)\r\n");
      out.write("     15. ServletContextListener 구현\r\n");
      out.write("     \r\n");
      out.write("     16. 실습 예제\r\n");
      out.write("        방명록\r\n");
      out.write("        게시판\r\n");
      out.write("        답변형(계층형) 게시판\r\n");
      out.write("        파일 첨부 게시판(자료실)\r\n");
      out.write("        회원가입 + 인증처리\r\n");
      out.write("        등등\r\n");
      out.write("        \r\n");
      out.write("        차트\r\n");
      out.write("        Ajax\r\n");
      out.write("        구글맵\r\n");
      out.write("        OPEN API (다음 카카오 우편번호 검색 API)\r\n");
      out.write("        등등\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("     5. 정적 페이지 / 동적 페이지\r\n");
      out.write("     webapp\r\n");
      out.write("      ㄴ days01\r\n");
      out.write("      	ㄴ ex01.html\r\n");
      out.write("      	ㄴ ex01.jsp\r\n");
      out.write("  </xmp>\r\n");
      out.write("</div> \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
